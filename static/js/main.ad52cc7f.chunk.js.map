{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","isSorted","renderedGoods","goods","visibleGoods","sort","prevGood","nextGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAWL,GAAcG,IAAaP,EAASM,KAC/CI,EAhCD,SACLC,EACAJ,EACAH,GAEA,IAAMQ,EAAY,YAAOD,GAezB,OAbAC,EAAaC,MAAK,SAACC,EAAUC,GAC3B,OAAQR,GACN,KAAKP,EAASgB,SACZ,OAAOF,EAASG,cAAcF,GAEhC,KAAKf,EAASkB,OACZ,OAAOJ,EAASK,OAASJ,EAASI,OAEpC,QACE,OAAO,MAITf,EACKQ,EAAaQ,UAGfR,EAQeS,CACpBpB,EACAM,EACAH,GAoBF,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaP,EAASgB,WAEtCS,QA1B8B,WACpCjB,EAAYR,EAASgB,WAmBjB,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaP,EAASkB,SAEtCO,QAjCsB,WAC5BjB,EAAYR,EAASkB,SA0BjB,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAapB,IAEjBqB,QAxCmB,WACzBpB,GAAeD,IAiCX,qBAWCK,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA7Ce,WACvBjB,EAAYR,EAASM,MACrBD,GAAc,IAwCR,sBAUJ,6BACGK,EAAcgB,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC7HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ad52cc7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prevGood, nextGood) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return prevGood.localeCompare(nextGood);\n\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const isSorted = isReversed || sortType !== SortType.NONE;\n  const renderedGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  const handleClickSortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleClickSortLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleClickReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleClickReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleClickSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleClickSortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {isSorted && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClickReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {renderedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}